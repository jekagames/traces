var database = {
  "121928132": { "title":"story01", "text":"[You can see their traces permeating the space, tying echoes of their very beings to the artefacts that they left behind, to the spaces and things that meant something to them here. Track down the artefacts and spaces, and we can analyze the traces. That's what you're here to]", "audio_filename":"log00.ogg"}
}

var lineMaxCharacters = 20;
var maxRows = 4;
var delayPerChunk = 1000;

console.log("Initial info:")
console.log(database);

function getStoryLine(raw_id){
  return database[raw_id.toString()];
}

var testStoryLine = getStoryLine("121928132");

console.log(testStoryLine);
console.log(processRawText(testStoryLine));
displayStoryNode(testStoryLine);

// this expects a node with title, and rawtext, with chunks empty
function processRawText(storyline){
  var rawText = storyline.text;
  var words = rawText.split(" ");
  var rows = [];
  var currentRow = "";

  console.log(words);

  for (i = 0; i < words.length; i++){
    if(currentRow.length + words[i].length > lineMaxCharacters){
      // we need to split
      // add current row to array
      rows.push(currentRow.trim());
      // create a new row
      currentRow = words[i] + " ";
    }
    else {
      currentRow += words[i] + " ";
    }
  }
  rows.push(currentRow.trim());
  storyline.rows = rows;
  return storyline;
}

function displayStoryNode(storynode){
  // sends the text to serialport 4 rowas at a time
  var lastIndex =-1;
  var chunks = [];
  for(i = 0; i < storynode.rows.length; i++) {
    var msg = "";
    var chunk = storynode.rows.slice(i, i + 4);
    msg = chunk.join(" ");
    lastIndex = i+3;
    chunks.push(msg);
  }
  for (d = 0; d < chunks.length; d++){
    var display = chunks[d];
    setTimeout(displaySingleChunk, delayPerChunk*(d+1), display);
  }
}

function displaySingleChunk(chunk){
  //instead of logging to console, emit to the serial port 
  console.log(chunk);
}